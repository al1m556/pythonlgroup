# Исключения (exceptions) - ещё один тип данных в python. 
# Исключения необходимы для того, чтобы сообщать программисту об ошибках.


BaseException # Базовое исключение, от которого берут начало все остальные исключения. 
# Кроме ошибок в написании кода, в него входят и системные ошибкию

# BaseException включает в себя:
#                 SystemExit 

#                 KeyboardInterrupt

#                 GeneratorExit

#                 Exception

Exception  # Базовое несистемное исключение, которое можно получить в пайтоне путем возникновения в коде каких либо ошибок.

# Ввиду огромного количества ошибок, наследуемых от Exception, мы будем разбирать только наиболее часто встречающиеся.
# А именно: 
                # *ArithmeticError - арифметическая ошибка.
                #  Дополнительно включает в себя: 

                #     FloatingPointError - порождается при неудачном выполнении операции с плавающей запятой. На практике встречается нечасто.

                #     OverflowError - возникает, когда результат арифметической операции слишком велик для представления. 
                #     Не появляется при обычной работе с целыми числами (так как python поддерживает длинные числа),
                #     но может возникать в некоторых других случаях.

                #     ZeroDivisionError - деление на ноль.

                # *LookupError - некорректный индекс или ключ.
                #  В него также входят: 

                #     IndexError - индекс не входит в диапазон элементов.

                #     KeyError - несуществующий ключ (в словаре, множестве или другом объекте).

                # *NameError - не найдено переменной с таким именем 
                #        
                # *FileExistsError - попытка создания файла или директории, которая уже существует.  
                #          
                # *SyntaxError - синтаксическая ошибка.
                #  В нее также включена:

                #     IndentationError - неправильные отступы.

                # *TypeError - операция применена к объекту несоответствующего типа.

                # *ValueError - функция получает аргумент правильного типа, но некорректного значения.    



# Примеры ситуаций, в которых возникают те или иные ошибки


num1 = int('5a')                    # ValueError - Функция int получает аргумент типа строка, 
                                    # но не может преобразовать значение(букву) в число
print(num1 + 10)

list1 = [1,2,3,4,5]
index = '5'
print(list1[index])                 # TypeError - указатель индекса должен содержать целое число(int), 
                                    # а получает переменную типа строка

print(list1[10])                    # IndexError - список получает индекс, превышающий количество элементов в списке

dict1 = {'name': 'Alex',
'age':26}

print(dict1['job'])                 #KeyError - словарь получает ключ, который отсутствует в словаре

res1 = 10 / 0                       #ZeroDivisionError - ошибка деления на ноль 
print(res1)


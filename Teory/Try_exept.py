# Работа с исключениями try/except/else/finally

# try/except


# Во время написания программы, даже при верном синтаксисе, в ходе ее исполнения могут возникать ошибки. 
# В Python эти ошибки называются исключения (exceptions).

# Чаще всего можно предсказать, какого рода исключения возникнут во время исполнения программы.
# Например, если программа на вход ожидает два числа, а на выходе выдает их сумму, 
# а пользователь ввел вместо одного из чисел строку, появится ошибка TypeError.

# Python позволяет работать с исключениями. Их можно перехватывать и выполнять определенные действия в том случае, если возникло исключение.

# Примечание
# Когда в программе возникает исключение, она сразу завершает работу.

# Для работы с исключениями используется конструкция try/except:

try:
    a = 10/0
    print(a)
except ZeroDivisionError:
    print("На ноль делить нельзя")


# Конструкция try работает таким образом:

# Сначала выполняются выражения, которые записаны в блоке try.
# Если при выполнения блока try не возникло никаких исключений, блок except пропускается, и выполняется дальнейший код.
# Если во время выполнения блока try в каком-то месте возникло исключение, оставшаяся часть блока try пропускается.
# Если в блоке except указано исключение, которое возникло, выполняется код в блоке except.
# Если исключение, которое возникло, не указано в блоке except, выполнение программы прерывается и выдается ошибка.

try:
    print("Поделим числа")
    b = 15/0
    print('Получилось!')
except ZeroDivisionError:
    print("На ноль делить нельзя")

# В конструкции try/except может быть много except, если нужны разные действия в зависимости от типа ошибки.

# Например, скрипт divide.py делит два числа введенных пользователем:

try:
    a = input("Введите первое число: ")
    b = input("Введите второе число: ")
    result = int(a)/int(b)
    print("Результат: ", result)
except ValueError:
    print("Пожалуйста, вводите только числа")
except ZeroDivisionError:
    print("На ноль делить нельзя")

# В данном случае исключение ValueError возникает, 
# когда пользователь ввел строку вместо числа, во время перевода строки в число.

# Исключение ZeroDivisionError возникает в случае, если второе число было равным 0.


try:
    a = input("Введите первое число: ")
    b = input("Введите второе число: ")
    result = int(a)/int(b)
    print("Результат: ", result)
except (ValueError, ZeroDivisionError):
    print("Что-то пошло не так...")


# В блоке except можно не указывать конкретное исключение или исключения. В таком случае будут перехватываться все исключения.

try:
    a = input("Введите первое число: ")
    b = input("Введите второе число: ")
    result = int(a)/int(b)
    print("Результат: ", result)
except:
    print("Что-то пошло не так...")


# try/except/else
# В конструкции try/except есть опциональный блок else. Он выполняется в том случае, если не было исключения.

# Например, если необходимо выполнять в дальнейшем какие-то операции с данными, 
# которые ввел пользователь, можно записать их в блоке else:



try:
    a = input("Введите первое число: ")
    b = input("Введите второе число: ")
    result = int(a)/int(b)
    print("Результат: ", result)
except (ValueError, ZeroDivisionError):
    print("Что-то пошло не так...")
else:
    print("Результат в квадрате: ", result**2)

# try/except/finally
# Блок finally - это еще один опциональный блок в конструкции try. 
# Он выполняется всегда, независимо от того, было ли исключение или нет.

# Сюда ставятся действия, которые надо выполнить в любом случае. 
# Например, это может быть закрытие файла.

# Пример: 
try:
    a = input("Введите первое число: ")
    b = input("Введите второе число: ")
    result = int(a)/int(b)
    print("Результат: ", result)
except (ValueError, ZeroDivisionError):
    print("Что-то пошло не так...")
else:
    print("Результат в квадрате: ", result**2)
finally:
    print("Работа не волк. Работа ворк.")

